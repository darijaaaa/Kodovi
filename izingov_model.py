# -*- coding: utf-8 -*-
"""Izingov model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRC83Q5QnmUrQSe39UL5DUdjEAnFYfsy
"""

#učitavanje potrebnih biblioteka
import numpy as np
import random
import math
import matplotlib.pyplot as plt

#dimenzije matrice
n = 20
m = 20

#naoraviti matricu sa vrednostima spinova 1, -1
spin = np.random.randint(-1, 1, (m, n))
for i in range(m):
  for j in range(n):
    if spin[i][j] == 0:
      spin[i][j] = 1

spin

#funkcija koja računa energiju sistema tako što se sabiraju susedni spinovi 
def  energija(n,m):
  x = 0
  for i in range(m):
    for j in range(n):
      if i != 0:
        x += spin[j][i - 1] * spin[j][i]
      if j != 0:
        x += spin[j - 1][i] * spin[j][i]
      if j != n - 1:
        x += spin[j][i] * spin[j + 1][i]
      if i != m - 1:
        x += spin[j][i] * spin[j][i + 1]
  return x

H = - energija(n, m)
t = 1             #temperatura: koristiti vrednosti manje od 3
HH = []           #lista sa vrednostima energije
MM = []           #lista sa vrednostima magnetizacije
u = []            #lista sa vrednostima vreme

#računanje verovatnoće za promenu nasumično odabranog spina i menjanje matrice ukolikse zadovoljavaju uslovi, temperatura je konstantna
for i in range(100000):
  ki = random.randint(0, m - 1)
  kj = random.randint(0, n - 1)
  spin[kj][ki] *= -1
  dH = - energija(n, m) - H
  if dH > 0: 
    k = np.random.random(1)[0]
    if (math.e ** (-dH/t)) < k:
      spin[kj][ki] *= -1
  H = - energija(n, m)
  HH.append(H)
  M = 0
  for k in range(m):
    for j in range(n):
      M += spin[j][k]
  M = M / ((m * n)**2)
  MM.append(M)
  u.append(i)    #lista sa vrednostima vremena

#crtanje grafika zavisnosti energije od vremena
plt.plot
plt.plot(u, HH, color="blue")
plt.xlabel("vreme")
plt.ylabel("energija")

#crtanje grafika zavisnosti magnetizacije od vremena
plt.plot
plt.plot(u, MM, color="red")
plt.xlabel("vreme")
plt.ylabel("magnetizacija")

#spinovi kao slika
plt.imshow(spin)

